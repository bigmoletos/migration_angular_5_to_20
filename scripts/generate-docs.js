#!/usr/bin/env node

/**
 * Script de G√©n√©ration Automatique de Documentation
 *
 * Ce script g√©n√®re automatiquement la documentation compl√®te du projet
 * de migration Angular 5 ‚Üí 20 en utilisant le DocumentationGenerator.
 *
 * Fonctionnalit√©s :
 * - G√©n√©ration de documentation HTML interactive
 * - Documentation Markdown pour GitHub/GitLab
 * - Documentation JSON structur√©e
 * - Diagrammes d'architecture Mermaid
 * - Documentation par phase de migration
 * - Statistiques et m√©triques du projet
 * - Recommandations d'am√©lioration
 *
 * Usage:
 *   node scripts/generate-docs.js
 *   node scripts/generate-docs.js --formats=html,markdown
 *   node scripts/generate-docs.js --include-phases --include-diagrams
 *
 * @author Migration Angular Team
 * @version 1.0.0
 * @since 2024-01-01
 */

const { execSync } = require('child_process');
const path = require('path');
const fs = require('fs');

/**
 * Configuration par d√©faut du g√©n√©rateur de documentation
 */
const DEFAULT_CONFIG = {
  projectPath: process.cwd(),
  outputPath: './docs/generated',
  formats: ['html', 'markdown', 'json'],
  includePhases: true,
  includeDiagrams: true,
  detailLevel: 'comprehensive',
  verbose: true
};

/**
 * Fonction principale de g√©n√©ration de documentation
 */
async function generateDocumentation() {
  console.log('üöÄ D√©marrage de la g√©n√©ration automatique de documentation');
  console.log('=' .repeat(60));

  try {
    // V√©rifier que nous sommes dans le bon r√©pertoire
    if (!fs.existsSync('./package.json')) {
      throw new Error('‚ùå Ce script doit √™tre ex√©cut√© depuis la racine du projet');
    }

    // Lire la configuration du projet
    const packageJson = JSON.parse(fs.readFileSync('./package.json', 'utf-8'));
    console.log(`üì¶ Projet: ${packageJson.name} v${packageJson.version}`);
    console.log(`üìù Description: ${packageJson.description}`);

    // Construire le projet si n√©cessaire
    console.log('\nüî® Construction du projet...');
    try {
      execSync('npm run build', { stdio: 'inherit' });
      console.log('‚úÖ Projet construit avec succ√®s');
    } catch (error) {
      console.log('‚ö†Ô∏è Construction √©chou√©e, tentative de g√©n√©ration quand m√™me...');
    }

    // G√©n√©rer la documentation
    console.log('\nüìö G√©n√©ration de la documentation...');
    const command = buildDocumentationCommand();
    console.log(`üîß Commande: ${command}`);

    execSync(command, { stdio: 'inherit' });

    // Afficher les r√©sultats
    console.log('\n‚úÖ Documentation g√©n√©r√©e avec succ√®s !');
    displayResults();

    // G√©n√©rer des rapports suppl√©mentaires
    await generateAdditionalReports();

    console.log('\nüéâ G√©n√©ration de documentation termin√©e !');
    console.log('üìÑ Consultez le dossier ./docs/generated/ pour voir les r√©sultats');

  } catch (error) {
    console.error('‚ùå Erreur lors de la g√©n√©ration de documentation:', error.message);
    process.exit(1);
  }
}

/**
 * Construit la commande de g√©n√©ration de documentation
 *
 * @returns {string} Commande √† ex√©cuter
 */
function buildDocumentationCommand() {
  const args = [
    'node tools/doc-generator/index.js',
    `--project-path="${DEFAULT_CONFIG.projectPath}"`,
    `--output-path="${DEFAULT_CONFIG.outputPath}"`,
    `--formats=${DEFAULT_CONFIG.formats.join(',')}`,
    `--detail-level=${DEFAULT_CONFIG.detailLevel}`
  ];

  if (DEFAULT_CONFIG.includePhases) {
    args.push('--include-phases');
  }

  if (DEFAULT_CONFIG.includeDiagrams) {
    args.push('--include-diagrams');
  }

  if (DEFAULT_CONFIG.verbose) {
    args.push('--verbose');
  }

  return args.join(' ');
}

/**
 * Affiche les r√©sultats de la g√©n√©ration
 */
function displayResults() {
  const outputPath = DEFAULT_CONFIG.outputPath;

  if (!fs.existsSync(outputPath)) {
    console.log('‚ö†Ô∏è Dossier de sortie non trouv√©');
    return;
  }

  console.log('\nüìÑ Fichiers g√©n√©r√©s:');
  const files = fs.readdirSync(outputPath);
  files.forEach(file => {
    const filePath = path.join(outputPath, file);
    const stats = fs.statSync(filePath);
    const size = formatFileSize(stats.size);
    const type = getFileType(file);
    console.log(`  ${type} ${file} (${size})`);
  });

  // Afficher les statistiques
  console.log('\nüìä Statistiques:');
  console.log(`  üìÅ Fichiers g√©n√©r√©s: ${files.length}`);
  console.log(`  üìÑ Formats: ${DEFAULT_CONFIG.formats.join(', ')}`);
  console.log(`  üìã Phases incluses: ${DEFAULT_CONFIG.includePhases ? 'Oui' : 'Non'}`);
  console.log(`  üìä Diagrammes inclus: ${DEFAULT_CONFIG.includeDiagrams ? 'Oui' : 'Non'}`);
}

/**
 * G√©n√®re des rapports suppl√©mentaires
 */
async function generateAdditionalReports() {
  console.log('\nüìà G√©n√©ration de rapports suppl√©mentaires...');

  try {
    // Rapport de qualit√© du code
    await generateCodeQualityReport();

    // Rapport de couverture de tests
    await generateTestCoverageReport();

    // Rapport de performance
    await generatePerformanceReport();

  } catch (error) {
    console.log('‚ö†Ô∏è Erreur lors de la g√©n√©ration des rapports suppl√©mentaires:', error.message);
  }
}

/**
 * G√©n√®re un rapport de qualit√© du code
 */
async function generateCodeQualityReport() {
  console.log('  üîç G√©n√©ration du rapport de qualit√© du code...');

  try {
    // Ex√©cuter ESLint
    execSync('npm run lint', { stdio: 'pipe' });
    console.log('    ‚úÖ ESLint: Aucune erreur d√©tect√©e');
  } catch (error) {
    console.log('    ‚ö†Ô∏è ESLint: Erreurs d√©tect√©es (voir logs)');
  }

  try {
    // Ex√©cuter TypeScript compiler
    execSync('npx tsc --noEmit', { stdio: 'pipe' });
    console.log('    ‚úÖ TypeScript: Aucune erreur de type');
  } catch (error) {
    console.log('    ‚ö†Ô∏è TypeScript: Erreurs de type d√©tect√©es');
  }
}

/**
 * G√©n√®re un rapport de couverture de tests
 */
async function generateTestCoverageReport() {
  console.log('  üß™ G√©n√©ration du rapport de couverture de tests...');

  try {
    execSync('npm run test:coverage', { stdio: 'pipe' });
    console.log('    ‚úÖ Tests: Couverture g√©n√©r√©e');
  } catch (error) {
    console.log('    ‚ö†Ô∏è Tests: Erreurs lors de l\'ex√©cution');
  }
}

/**
 * G√©n√®re un rapport de performance
 */
async function generatePerformanceReport() {
  console.log('  ‚ö° G√©n√©ration du rapport de performance...');

  try {
    // Mesurer le temps de build
    const startTime = Date.now();
    execSync('npm run build', { stdio: 'pipe' });
    const buildTime = Date.now() - startTime;

    console.log(`    ‚úÖ Build: ${buildTime}ms`);

    // Analyser la taille du bundle
    if (fs.existsSync('./dist')) {
      const bundleSize = getDirectorySize('./dist');
      console.log(`    ‚úÖ Bundle: ${formatFileSize(bundleSize)}`);
    }

  } catch (error) {
    console.log('    ‚ö†Ô∏è Performance: Erreurs lors de l\'analyse');
  }
}

/**
 * Formate la taille d'un fichier en unit√©s lisibles
 *
 * @param {number} bytes - Taille en octets
 * @returns {string} Taille format√©e
 */
function formatFileSize(bytes) {
  if (bytes === 0) return '0 B';

  const k = 1024;
  const sizes = ['B', 'KB', 'MB', 'GB'];
  const i = Math.floor(Math.log(bytes) / Math.log(k));

  return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
}

/**
 * D√©termine le type d'un fichier pour l'affichage
 *
 * @param {string} filename - Nom du fichier
 * @returns {string} Emoji repr√©sentant le type
 */
function getFileType(filename) {
  const ext = path.extname(filename).toLowerCase();

  switch (ext) {
    case '.html': return 'üåê';
    case '.md': return 'üìù';
    case '.json': return 'üìã';
    case '.mermaid': return 'üìä';
    case '.png': case '.jpg': case '.jpeg': case '.gif': return 'üñºÔ∏è';
    case '.pdf': return 'üìÑ';
    default: return 'üìÑ';
  }
}

/**
 * Calcule la taille d'un r√©pertoire
 *
 * @param {string} dirPath - Chemin du r√©pertoire
 * @returns {number} Taille en octets
 */
function getDirectorySize(dirPath) {
  let totalSize = 0;

  function calculateSize(itemPath) {
    const stats = fs.statSync(itemPath);

    if (stats.isDirectory()) {
      const files = fs.readdirSync(itemPath);
      files.forEach(file => {
        calculateSize(path.join(itemPath, file));
      });
    } else {
      totalSize += stats.size;
    }
  }

  calculateSize(dirPath);
  return totalSize;
}

/**
 * Parse les arguments de ligne de commande
 *
 * @returns {Object} Arguments pars√©s
 */
function parseArguments() {
  const args = {};

  for (let i = 2; i < process.argv.length; i++) {
    const arg = process.argv[i];

    if (arg === '--help' || arg === '-h') {
      args.help = true;
    } else if (arg === '--formats' || arg === '-f') {
      args.formats = process.argv[++i].split(',');
    } else if (arg === '--no-phases') {
      args.includePhases = false;
    } else if (arg === '--no-diagrams') {
      args.includeDiagrams = false;
    } else if (arg === '--detail-level' || arg === '-d') {
      args.detailLevel = process.argv[++i];
    } else if (arg === '--quiet' || arg === '-q') {
      args.verbose = false;
    }
  }

  return args;
}

/**
 * Affiche l'aide du script
 */
function showHelp() {
  console.log(`
üìö G√©n√©rateur Automatique de Documentation - Migration Angular 5 ‚Üí 20

Ce script g√©n√®re automatiquement une documentation compl√®te et d√©taill√©e
pour le projet de migration Angular, incluant :
- Documentation API extraite des commentaires JSDoc
- Statistiques du projet et m√©triques de qualit√©
- Guides d'utilisation et exemples
- Diagrammes d'architecture
- Documentation par phase de migration
- Recommandations d'am√©lioration

Usage:
  node scripts/generate-docs.js [options]

Options:
  -f, --formats <formats>      Formats de sortie s√©par√©s par des virgules (d√©faut: html,markdown,json)
  --no-phases                  Exclure la documentation par phase
  --no-diagrams                Exclure les diagrammes d'architecture
  -d, --detail-level <level>   Niveau de d√©tail: basic, detailed, comprehensive (d√©faut: comprehensive)
  -q, --quiet                  Mode silencieux (moins de logs)
  -h, --help                   Afficher cette aide

Exemples:
  # G√©n√©ration compl√®te (d√©faut)
  node scripts/generate-docs.js

  # G√©n√©ration HTML uniquement
  node scripts/generate-docs.js --formats=html

  # G√©n√©ration sans diagrammes
  node scripts/generate-docs.js --no-diagrams

  # G√©n√©ration en mode silencieux
  node scripts/generate-docs.js --quiet

Fonctionnalit√©s:
  ‚úÖ Extraction automatique des commentaires JSDoc
  ‚úÖ Analyse des m√©tadonn√©es du projet
  ‚úÖ Calcul des statistiques de code
  ‚úÖ G√©n√©ration de documentation API
  ‚úÖ Cr√©ation de diagrammes d'architecture
  ‚úÖ Documentation par phase de migration
  ‚úÖ Recommandations d'am√©lioration
  ‚úÖ Rapports de qualit√© du code
  ‚úÖ Rapports de couverture de tests
  ‚úÖ Rapports de performance

Structure de sortie:
  docs/generated/
  ‚îú‚îÄ‚îÄ index.html              # Documentation HTML principale
  ‚îú‚îÄ‚îÄ README.md               # Documentation Markdown
  ‚îú‚îÄ‚îÄ documentation.json      # Documentation JSON structur√©e
  ‚îú‚îÄ‚îÄ architecture.mermaid    # Diagramme d'architecture
  ‚îú‚îÄ‚îÄ dependencies.mermaid    # Diagramme de d√©pendances
  ‚îú‚îÄ‚îÄ phase-1-angular-5-to-8.md    # Documentation Phase 1
  ‚îú‚îÄ‚îÄ phase-2-angular-8-to-12.md   # Documentation Phase 2
  ‚îú‚îÄ‚îÄ phase-3-angular-12-to-16.md  # Documentation Phase 3
  ‚îî‚îÄ‚îÄ phase-4-angular-16-to-20.md  # Documentation Phase 4

Version: 1.0.0
Auteur: Migration Angular Team
Licence: MIT
`);
}

// Gestion des arguments
const args = parseArguments();

if (args.help) {
  showHelp();
  process.exit(0);
}

// Mise √† jour de la configuration avec les arguments
if (args.formats) DEFAULT_CONFIG.formats = args.formats;
if (args.includePhases === false) DEFAULT_CONFIG.includePhases = false;
if (args.includeDiagrams === false) DEFAULT_CONFIG.includeDiagrams = false;
if (args.detailLevel) DEFAULT_CONFIG.detailLevel = args.detailLevel;
if (args.verbose === false) DEFAULT_CONFIG.verbose = false;

// Ex√©cution du script
generateDocumentation().catch(error => {
  console.error('üí• Erreur critique:', error);
  process.exit(1);
});
